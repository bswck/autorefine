# This file was generated from skeleton-ci/skeleton-python@0.0.2rc-215-g792492f.
# Instead of changing this particular file, you might want to alter the template:
# https://github.com/skeleton-ci/skeleton-python/tree/0.0.2rc-215-g792492f/project/pyproject.toml.jinja

[tool.poetry]
name = "autorefine"
version = "0.0.0"
description = "Scalable semi-automated code quality refining."
authors = ["bswck <bartoszpiotrslawecki@gmail.com>"]
license = "GPL-3.0"
readme = "README.md"
packages = [{ include = "autorefine/" }]
homepage = "https://github.com/bswck/autorefine"

[tool.poetry.scripts]
autorefine = "autorefine.__main__:main"

[tool.poetry.urls]
Documentation = "https://autorefine.readthedocs.io/en/latest/"
Issues = "https://github.com/bswck/autorefine/issues"
Distribution = "https://pypi.org/project/autorefine/"
Coverage = "https://coverage-badge.samuelcolvin.workers.dev/redirect/bswck/autorefine"

[tool.poetry.dependencies]
python = ">=3.8"
pydantic = "^2.6.3"
typer = "^0.12.1"

[tool.poetry.group.dev.dependencies]

[tool.poetry.group.dev-skeleton.dependencies]
# This dependency group was generated from skeleton-ci/skeleton-python@0.0.2rc-215-g792492f.
# Instead of changing this particular file, you might want to alter the template:
# https://github.com/skeleton-ci/skeleton-python/tree/0.0.2rc-215-g792492f/project/pyproject.toml.jinja
mypy = ">=1.9.0"
ruff = ">=0.3.4"
towncrier = ">=23.11.0"
coverage = ">=7.4.4"
pytest = ">=8.1.1"
pytest-doctestplus = ">=1.2.1"
pytest-sugar = ">=1.0.0"
covdefaults = ">=2.3.0"
poethepoet = ">=0.25.0"
pre-commit = "<3.6.0"
smokeshow = ">=0.4.0"
keyring = ">=25.0.0"

[tool.pytest.ini_options]
addopts = "--doctest-modules"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
markdown-exec = ">=1.3.0"
mkdocs-material = ">=8.2,<10.0.0"
mkdocstrings = { version = ">=0.19.0", extras = ["python"] }

[tool.poe.tasks]
test = "pytest -v"
lint = "ruff check ."
skeleton = "scripts/skeleton.0.0.2rc-215-g792492f.bash"
check = [
    { ref="test" },
    { ref="lint" },
]
release.script = "scripts.release:main"

[tool.poe.tasks.added]
shell = "towncrier create $TICKET.added.md --edit"
args = [{name = "TICKET", default = "+", positional = true}]

[tool.poe.tasks.changed]
shell = "towncrier create $TICKET.changed.md --edit"
args = [{name = "TICKET", default = "+", positional = true}]

[tool.poe.tasks.fixed]
shell = "towncrier create $TICKET.fixed.md --edit"
args = [{name = "TICKET", default = "+", positional = true}]

[tool.poe.tasks.deprecated]
shell = "towncrier create $TICKET.deprecated.md --edit"
args = [{name = "TICKET", default = "+", positional = true}]

[tool.poe.tasks.removed]
shell = "towncrier create $TICKET.removed.md --edit"
args = [{name = "TICKET", default = "+", positional = true}]

[tool.poe.tasks.security]
shell = "towncrier create $TICKET.security.md --edit"
args = [{name = "TICKET", default = "+", positional = true}]

[tool.ruff]
exclude = ["tests/", "scripts/"]

[tool.ruff.lint]
# To discuss the presented rationales, contact the author (bswck).
select = ["ALL"]
ignore = [
    # Description: Missing type annotation for self in method
    # Rationale: It is mostly redundant, as is for ANN102.
    "ANN101",

    # Description: Missing type annotation for cls in method
    # Rationale: It is mostly redundant, as is for ANN101.
    "ANN102",

    # Description: Dynamically typed expressions (typing.Any) are disallowed
    # Rationale:
    #  We use Any to allow user to constrain return types of our functions on their own.
    #  For example, having a function `def foo() -> Any: ...` allows user to write
    #  `my_foo: int = foo()` and have it passed type checking, since `Any` disables
    #  type checking completely.
    "ANN401",

    # Description: 1 blank line required before class docstring
    # Rationale: Remove the warning -- D211 (no-blank-line-before-class) preferred.
    "D203",

    # Description: Multi-line docstring summary should start at the second line
    # Rationale: Remove the warning -- D213 (multi-line-summary-second-line) preferred.
    "D212",

    # Description: Line contains TODO, consider resolving the issue
    # Rationale: Not appropriate for the project.
    "FIX002",

    # Description: Documentation issues.
    # Rationale: Disabled temporarily.
    "D",
]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.mypy]
strict = true

[tool.towncrier]
directory = "news"
package = "autorefine"
filename = "CHANGELOG.md"
start_string = "<!-- insertion marker -->\n"
underlines = ["", "", ""]  # We use Markdown
title_format = "## [{version}](https://github.com/bswck/autorefine/tree/{version}) ({project_date})"
issue_format = "[#{issue}](https://github.com/bswck/autorefine/issues/{issue})"

[[tool.towncrier.type]]
directory = "security"
name = "Security"
showcontent = true

[[tool.towncrier.type]]
directory = "removed"
name = "Removed"
showcontent = true

[[tool.towncrier.type]]
directory = "deprecated"
name = "Deprecated"
showcontent = true

[[tool.towncrier.type]]
directory = "added"
name = "Added"
showcontent = true

[[tool.towncrier.type]]
directory = "changed"
name = "Changed"
showcontent = true

[[tool.towncrier.type]]
directory = "fixed"
name = "Fixed"
showcontent = true

[tool.coverage.run]
plugins = ["covdefaults"]
source = ["autorefine/"]
relative_files = true

[tool.coverage.report]
fail_under = 90

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
